---
engine: julia
---

# arl_sop {#sec-doc}
    

::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
arl_sop(m::Int, n::Int, lam, cl, reps, chart_choice, dist::UnivariateDistribution)

```

Function to compute the average run length (ARL) for a given control-limit and in-control distribution. The input parameters are:
 
  * `m::Int`: The number of rows for the final "SOP" matrix. Note that the final spatial matrix ("picture") equals m + 1.
  * `n::Int`: The number of columns for the final "SOP" matrix. Note that the final spatial matrix ("picture") equals n + 1.
  * `lam::Float64`: A scalar value for lambda for the EWMA chart.
  * `cl::Float64`: A scalar value for the control limit.
  * `reps::Int`: An integer value for the number of repetitions.
  * `chart_choice::Int`: An integer value for the chart choice. The options are 1-4.
  * `dist::Distribution`: A distribution for the in-control data. Here you can use any univariate distribution from the `Distributions.jl` package.


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
arl_sop(lam, cl, reps, chart_choice, data::Array{Float64, 3})

```

Function to compute the average run length (ARL) using a bootstraping approach. The input parameters are:
 
  * `lam::Float64`: A scalar value for lambda for the EWMA chart.
  * `cl::Float64`: A scalar value for the control limit.
  * `reps::Int`: An integer value for the number of repetitions.
  * `chart_choice::Int`: An integer value for the chart choice. The options are 1-4.
  * `p_mat::Array{Float64, 3}`: A 3D array with the data. The data has to be in the form of a 3D array.


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
arl_sop(lam, cl, reps, chart_choice, spatial_dgp, dist_error::UnivariateDistribution, dist_ao::Union{Nothing, UnivariateDistribution})

```

Function to compute the average run length (ARL) for a given out-of-control DGP. The input parameters are:
 
  * `lam::Float64`: A scalar value for lambda for the EWMA chart.
  * `cl::Float64`: A scalar value for the control limit.
  * `chart_choice::Int`: An integer value for the chart choice. The options are 1-4.
  * `spatial_dgp::AbstractSpatialDGP`: A struct for type for the spatial DGP. This can be either `SAR11`, `SINAR11`, `SQMA11`, `BSQMA11` or `SAR1`. Look at their documentation for more information.
  * `dist_error::Distribution`: A distribution for the error term. Here you can use any univariate distribution from the `Distributions.jl` package.
  * `dist_ao::Distribution`: A distribution for the out-of-control data. Here you can use any univariate distribution from the `Distributions.jl` package.


:::
    

