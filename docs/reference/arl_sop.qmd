---
engine: julia
---

# arl_sop {#sec-doc}
    

::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
arl_sop(lam, cl, sop_dgp::ICSP, d1::Int, d2::Int, reps=10_000; chart_choice=3)

```

Compute the average run length (ARL) for a given in-control spatial DGP. 
 
The input parameters are:
 
  * `lam::Float64`: A scalar value for lambda for the EWMA chart.
  * `cl::Float64`: A scalar value for the control limit.
  * `sop_dgp::ICSP`: A struct for the in-control spatial DGP.
  * `d1::Int`: An integer value for the first delay (d₁).
  * `d2::Int`: An integer value for the second delay (d₂).
  * `reps::Int`: An integer value for the number of repetitions. The default value is 10,000.
  * `chart_choice::Int`: An integer value for the chart choice. The options are 1-4.
The default value is 3.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
arl_sop(lam, cl, p_mat::Array{Float64,2}, reps=10_000)

```

Compute the average run length (ARL) using a bootstrap approach  for a particular delay (d₁-d₂) combination. 
 
The input parameters are:
 
  * `lam::Float64`: A scalar value for lambda for the EWMA chart.
  * `cl::Float64`: A scalar value for the control limit.
  * `p_mat::Array{Float64,2}`: A matrix with the relative frequencies for a particular
delay (d₁-d₂) combination. This matrix will be used for re-sampling. The matrix has to be  computed by `compute_p_array()`.
 
  * `reps::Int`: An integer value for the number of repetitions. The default value is 10,000.


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
arl_sop(lam, cl, p_array::Array{Float64,3}, reps=10_000; chart_choice=3)

```

Compute the average run length for the BP-EWMA-SOP for a given control limit    using bootstraping instead of a theoretical in-control distribution.
 
The input parameters are:
 
  * `lam::Float64`: A scalar value for lambda for the EWMA chart.
  * `cl::Float64`: A scalar value for the control limit.
  * `p_array::Array{Float64, 3}`: A 3D array with the with the relative frequencies
of each d1-d2 (delay) combination. The first dimension (rows) is the picture, the  second dimension refers to the patterns group (s₁, s₂, or s₃) and the third dimension  denotes each d₁-d₂ combination. This matrix will be used for re-sampling.
 
  * `reps::Int`: An integer value for the number of repetitions.
  * `chart_choice::Int`: An integer value for the chart choice. The options are 1-4.


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
 arl_sop(

```

lam, cl, spatial*dgp::SpatialDGP, d1::Int, d2::Int, reps=10*000; chart_choice=3 )
 
Compute the average run length (ARL) for a given out-of-control spatial DGP. 
 
The input parameters are:
 
  * `lam::Float64`: A scalar value for lambda for the EWMA chart.
  * `cl::Float64`: A scalar value for the control limit.
  * `spatial_dgp::SpatialDGP`: A struct for the out-of-control spatial DGP.
  * `d1::Int`: An integer value for the first delay (d₁).
  * `d2::Int`: An integer value for the second delay (d₂).
  * `reps::Int`: An integer value for the number of repetitions. The default value is 10,000.
  * `chart_choice::Int`: An integer value for the chart choice. The options are 1-4.
The default value is 3.
 


:::
    

