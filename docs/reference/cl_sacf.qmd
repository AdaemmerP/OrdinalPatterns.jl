---
engine: julia
---

# cl_sacf {#sec-doc}
    

::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
cl_sacf(m, n, lam, L0, reps, clinit, jmin, jmax, verbose, dist_error)

```

Compute the control limit for the exponentially weighted moving average (EWMA) control chart using the spatial autocorrelation function (SACF) for a lag length of 1. The function returns the control limit for a given average run length (ARL) `L0` and a given number of repetitions `reps`. The input arguments are:
 
  * `m::Int`: The number of rows in the matrix for the SOP matrix. Note that the original matrix will have dimensions (m + 1) x (n + 1).
  * `n::Int`: The number of columns in the matrix for the SOP matrix. Note that the original matrix will have dimensions (m + 1) x (n + 1).
  * `lam`: The smoothing parameter for the EWMA control chart.
  * `L0`: The average run length (ARL) to use for the control limit.
  * `reps`: The number of repetitions to compute the ARL.
  * `clinit`: The initial control limit to use for the EWMA control chart. If set to 0, the function will search for the control limit that gives an ARL greater than `L0`.
  * `jmin`: The minimum number of values to change after the decimal point in the control limit.
  * `jmax`: The maximum number of values to change after the decimal point in the control limit.
  * `verbose`: A boolean to indicate whether to print the control limit and ARL for each iteration.
  * `dist_error`: The distribution to use for the error term in the SACF function. This can be any univariate distribution from the `Distributions.jl` package or a custom distribution with a defined method for `rand()` and `rand!()`.

```{julia}
#| eval: false
#--- Example
# Set parameters
m = 10
n = 10
lam = 0.1
L0 = 370
reps = 1000
clinit = 0.05
jmin = 4
jmax = 7
verbose = true
dist_error = Normal(0, 1)

# Compute control limit
cl = cl_sacf(m, n, lam, L0, reps, clinit, jmin, jmax, verbose, dist_error)

```



:::
    

