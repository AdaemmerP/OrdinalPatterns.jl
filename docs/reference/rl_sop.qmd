---
engine: julia
---

# rl_sop {#sec-doc}
    

::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
rl_sop(lam, cl, lookup_array_sop, reps_range, dist, chart_choice, m, n, d1::Int, d2::Int)

```

Compute the run length for a given in-control spatial DGP. 
 
The input parameters are:
 
  * `lam::Float64`: A scalar value for lambda for the EWMA chart.
  * `cl::Float64`: A scalar value for the control limit.
  * `lookup_array_sop::Array{Int, 4}`: A 4D array with the lookup array for the sops,
which will be computed computed using `lookup_array_sop = compute_lookup_array_sop()`. 
 
  * `reps_range::UnitRange{Int}`: A range of integers for the number of repetitions.
  * `dist::Distribution`: A distribution for the error term. Here you can use any
univariate distribution from the `Distributions.jl` package.
 
  * `chart_choice::Int`: An integer value for the chart choice. The options are 1-4.
  * `m::Int`: An integer value for the number of rows for the final "SOP" matrix.
  * `n::Int`: An integer value for the number of columns for the final "SOP" matrix.
  * `d1::Int`: An integer value for the first delay (d₁).
  * `d2::Int`: An integer value for the second delay (d₂).


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
rl_sop(lam, cl, reps_range, chart_choice, p_mat::Array{Float64,2})

```

Compute the run length for a given control limit using bootstraping instead  of a theoretical in-control distribution.
 
The input parameters are:
 
  * `lam::Float64`: A scalar value for lambda for the EWMA chart.
  * `cl::Float64`: A scalar value for the control limit.
  * `reps_range::UnitRange{Int}`: A range of integers for the number of repetitions.
This has to be a range to be compatible with `arl_sop()` which uses threading and multi-processing.
 
  * `chart_choice::Int`: An integer value for the chart choice. The options are 1-4.
  * `p_mat::Array{Float64,2}`: A matrix with the values of the relative frequencies
of each d1-d2 (delay) combination. This matrix will be used for re-sampling.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
rl_sop(lam, cl, reps_range, chart_choice, p_array::Array{Float64,3})

```

Compute the EWMA-BP-SOP run length for a given control limit using bootstraping instead  of a theoretical in-control distribution.
 
The input parameters are:
 
  * `lam::Float64`: A scalar value for lambda for the EWMA chart.
  * `cl::Float64`: A scalar value for the control limit.
  * `reps_range::UnitRange{Int}`: A range of integers for the number of repetitions.
  * `chart_choice::Int`: An integer value for the chart choice. The options are 1-4.
  * `p_array::Array{Float64,3}`: A 3D array with the with the relative frequencies for
each d1-d2 (delay) combination. The first dimension (rows) is the picture, the second dimension refers to the patterns group (s₁, s₂, or s₃) and the third dimension denotes each d₁-d₂ combination. This array will be used for re-sampling.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
rl_sop(

```

lam, cl, lookup*array*sop, p*reps, spatial*dgp::SpatialDGP, dist*error::UnivariateDistribution,    dist*ao::Union{Nothing,UnivariateDistribution}, chart_choice, m, n, d1::Int, d2::Int   )
 
Computes the run length for a given out-of-control DGP. The input parameters are:
 
  * `lam::Float64`: A scalar value for lambda for the EWMA chart.
  * `cl::Float64`: A scalar value for the control limit.
  * `lookup_array_sop::Array{Int, 4}`: A 4D array with the lookup array for the sops,
which will be computed computed using `lookup_array_sop = compute_lookup_array_sop()`.
 
  * `p_reps::UnitRange{Int}`: A range of integers for the number of repetitions.
  * `spatial_dgp::SpatialDGP`: A struct for the out-of-control spatial DGP.
  * `dist_error::UnivariateDistribution`: A distribution for the error term. Here you can use any
univariate distribution from the `Distributions.jl` package.
 
  * `dist_ao::Union{Nothing,UnivariateDistribution}`: A distribution for the additive outlier.
  * `chart_choice::Int`: An integer value for the chart choice. The options are 1-4.
  * `m::Int`: An integer value for the number of rows for the final "SOP" matrix.
  * `n::Int`: An integer value for the number of columns for the final "SOP" matrix.
  * `d1::Int`: An integer value for the first delay (d₁).
  * `d2::Int`: An integer value for the second delay (d₂).


:::
    

