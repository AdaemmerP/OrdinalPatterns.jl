---
engine: julia
---

# cl_sop {#sec-doc}
    

::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
cl_sop(

```

lam, L0, sop*dgp::ICSP, cl*init, d1::Int, d2::Int, reps=10*000;   chart*choice=3, jmin=4, jmax=6, verbose=false )
 
Compute the control limit for a given in-control distribution. The input parameters are:
 
  * `lam::Float64`:  A scalar value for lambda for the EWMA chart.
  * `L0::Float64`: The desired average run length.
  * `sop_dgp::ICSP`: A struct for the in-control spatial process.
  * `cl_init::Float64`: The initial value for the control limit.
  * `d1::Int`: The first (row) delay for the spatial process.
  * `d2::Int`: The second (column) delay for the spatial process.
  * `reps::Int`: The number of replications to compute the ARL.
  * `chart_choice::Int`: The chart choice for the SOP chart.
  * `jmin`: The minimum number of values to change after the decimal point in the control limit.
  * `jmax`: The maximum number of values to change after the decimal point in the control limit.
  * `verbose::Bool`: A boolean to indicate whether to print the control limit and ARL for each iteration.


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
cl_sop(

```

lam, L0, sp*dgp, cl*init, d1*vec::Vector{Int}, d2*vec::Vector{Int}, reps=10*000;   chart*choice=3, jmin=4, jmax=6, verbose=false )
 
Compute the control limit for the EWMA-chart for the BP-statistic. The function returns the control limit for a given average run. The input parameters are:
 
  * `lam::Float64`:  A scalar value for lambda for the EWMA chart.
  * `L0::Float64`: The desired average run length.
  * `sp_dgp`: The in-control spatial process (ICSP) to use for the control limit.
  * `cl_init::Float64`: The initial value for the control limit.
  * `d1_vec::Vector{Int}`: The vector of first (row) delays for the spatial process.
  * `d2_vec::Vector{Int}`: The vector of second (column) delays for the spatial process.
  * `reps::Int`: The number of replications to compute the ARL.
  * `chart_choice::Int`: The chart choice for the SOP chart.
  * `jmin`: The minimum number of values to change after the decimal point in the control limit.
  * `jmax`: The maximum number of values to change after the decimal point in the control limit.
  * `verbose::Bool`: A boolean to indicate whether to print the control limit and ARL for each iteration.


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
cl_sop(

```

lam, L0, p*mat::Array{Float64,2}, cl*init, reps=10*000;   chart*choice=3, jmin=4, jmax=6, verbose=false )
 
Compute the (bootstrap) SOP control limit for the EWMA-chart for one delay (d₁-d₂) combination. The function returns the control limit for a given average run.
 
The input parameters are:
 
  * `lam::Float64`:  A scalar value for lambda for the EWMA chart.
  * `L0::Float64`: The desired average run length.
  * `p_mat::Array{Float64,2}`: The matrix with relative frequencies of the SOPs. These
can be computed using the `compute_p_array()` function.
 
  * `cl_init::Float64`: The initial value for the control limit.
  * `reps::Int`: The number of replications to compute the ARL.
  * `chart_choice::Int`: The chart choice for the SOP chart.
  * `jmin`: The minimum number of values to change after the decimal point in the control limit.
  * `jmax`: The maximum number of values to change after the decimal point in the control limit.
  * `verbose::Bool`: A boolean to indicate whether to print the control limit and ARL for each iteration.


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
cl_sop(

```

lam, L0, p*array::Array{Float64,3}, cl*init, reps=10*000;   chart*choice=3, jmin=4, jmax=6, verbose=false )
 
Compute the (bootstrap) SOP control limit for the EWMA-chart for the BP-statistic. The function returns the control limit for a given average run. The input parameters are:
 
  * `lam::Float64`:  A scalar value for lambda for the EWMA chart.
  * `L0::Float64`: The desired average run length.
  * `p_array::Array{Float64,3}`: The array with relative frequencies of the SOPs. These
can be computed using the `compute_p_array()` function.
 
  * `cl_init::Float64`: The initial value for the control limit.
  * `reps::Int`: The number of replications to compute the ARL.
  * `chart_choice::Int`: The chart choice for the SOP chart.
  * `jmin`: The minimum number of values to change after the decimal point in the control limit.
  * `jmax`: The maximum number of values to change after the decimal point in the control limit.
  * `verbose::Bool`: A boolean to indicate whether to print the control limit and ARL for each iteration.


:::
    

